package thread;


/**
 * 프로세서 	: 실행 중인 프로그램
 * 프로세스 	: 프로그램을 수행하는데 필요한 데이터와 메모리 등의 자원, 쓰레드로 구성
 * 쓰레드 	: 프로세스의 자원을 이용해서 실제로 작업을 수행하는 것, 경량 프로세스라고 부르기도 한다.
 * 그래서 모든 프로세스에는 최소한 하나 이상의 쓰레드가 존재
 * 멀티 쓰레드 프로세스 : 둘 이상의 쓰레드를 가진 프로세스
 * 쓰레드 수의 결정 : 프로세서의 메모리 한계에 따름
 * 
 * MultiTasking & MultiThreading
 * 현재 우리가 사용하고 있는 윈도우나 유닉스를 포함한 대부분의 OS는 멀티태스킹을 지원한다.
 * 멀티 쓰레딩 : 하나의 프로세스 내에서 여러 쓰레드가 동시에 작업을 수행하는 것
 * CPU의 코어가 한 번에 하나의 작업만 수행 가능하므로, 실제 처리되는 작업의 개수는 코어의 개수와 일치한다.
 * 코어가 아주 짧은 시간동안 여러 작업을 번갈아 가며 수행하므로 여러 작업들이 모두 동시에 수행되는 것처럼 보인다.
 * 
 * 쓰레드의 개수가 많다고 프로세스 성능이 좋다는 것은 아니다.
 * 
 * MultiThread의 장단점
 * 
 * 장점 : 
 * CPU의 사용률을 향상
 * 자원을 보다 효율적으로 사용
 * 사용자에 대한 응답성 향상
 * 작업이 분리되어 코드가 간결화
 * 
 * 예시 ) 우리가 채팅을 치는 동안에도 파일을 받거나, 음성대화를 나눌수 있는 것
 * 
 * 단점:
 * 자원을 공유하면서 작업을 하기 때문에 발생할 수 있는 동기화, 교착상태와 같은 문제들을 고려해서 신중히 프로그래밍 해야 한다.
 * 
 * 교착상태 :
 * 두 스레드가 자원을 점유한 상태에서 서로 상대편이 점유한 자원을 사용하려고 기다리느라 진행이 멈춰있는 상태
 * 
 * 
 * 쓰레드의 구현과 실행
 * 
 * 구현방법 :
 * Thread를 상속, Runnable인터페이스를 구현하는 방법 두가지
 * Thread클래스를 상속받으면 다른 클래스를 상속받을 수 없기 때문에, Runnable인터페이스를 구현하는 방법이 일반적
 * 
 * Runnable인터페이스를 구현하는 방법은 재사용성이 높고 코드의 일관성을 유지할 수 있기 때문에 보다 객관지향적인 방법이다.
 * @author Sunro
 *
 */
/* 1.Thread클래스의 상속
	class MyThread extends Thread{
		public void run() {작업내용} // Thread클래스의 run()을 오버라이딩	
//		}
*/


//2. Runnable인터페이스를 구현
public class AboutThread implements Runnable{
	
	//1,2번 모두 run을 오버라이딩 해야함
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
public static void main(String[] args) {
	
	
	
	
	
	}
}
